import argparse
import random
import os
import cv2
# from mediapipe import HandTracker
from .hand_tracker import HandTracker
import numpy as np
from pathlib import Path

#stolen from extract_hand
PALM_MODEL_PATH = os.path.join(Path(__file__).parent, "models", "palm_detection_without_custom_op.tflite")
LANDMARK_MODEL_PATH =  os.path.join(Path(__file__).parent, "models", "hand_landmark.tflite")
ANCHORS_PATH = os.path.join(Path(__file__).parent, "models", "anchors.csv")
detector = HandTracker(
    "True", #True = hand, False = palm i think
    PALM_MODEL_PATH,
    LANDMARK_MODEL_PATH,
    ANCHORS_PATH,
    box_shift=0.2,
    box_enlarge=1
)

'''
Takes in a frame (image), returns region of hand crop
'''
def extract_hand_region_from_frame(frame):
    image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    points, bbox = detector(image)

    rect = cv2.minAreaRect(bbox.astype(np.int64))

    # TODO: use a vector generated by 2 hand points to align the cropped region. 
    # The following code doesn't always orient the crop completely correctly.
    
    src_pts = cv2.boxPoints(rect)
    width = int(rect[1][0])
    height = int(rect[1][1])
    dst_pts = np.array([
                [0, 0],
                [width-1, 0],
                [width-1, height-1], 
                [0, height-1]],
                dtype="float32")
    M = cv2.getPerspectiveTransform(src_pts, dst_pts)
    warped = cv2.warpPerspective(frame, M, (width, height))
    return warped

'''
Return the midpoint frames of each carry item sequence in a picklist
Input:
 - video_path: a path to a video file
 - htk_output_path: a path to an htk output file
 - show_frames: bool for whether or not we should display the hand extract frames on screen
Output:
 - cv2 image (numpy array)
'''
def get_midpoint_carry_item_frames(video_path: str, htk_output_path: str, show_frames: bool):
    cap = cv2.VideoCapture(video_path)
    fps = cap.get(cv2.CAP_PROP_FPS)


    #find each carry item sequence - in the aeim grammar, it's 'e'
    boundaries = utils.get_htk_boundaries(htk_output_path, fps = fps)

    #[[start0, end0], [start1, end1], ...]
    carry_sequences_frames = [[int(boundaries['e'][i] * fps), int(boundaries['e'][i + 1] * fps)] for i in range(0, int(len(boundaries['e'])/2), 2)]

    #for storing hand region crops
    hand_region_images = []

    #display time stamp in video (print first)
    for start, end in carry_sequences_frames:
        #show the middle image (print time stamp)
        midpt = int((start + end) / 2)
        image = utils.get_frame(cap, midpt)

        hand_region_image = extract_hand_region_from_frame(image)
        hand_region_images.append(hand_region_image)

        if show_frames:
            utils.show_frame(hand_region_image, [480, 480])

    return hand_region_images

if __name__ == "__main__":

    DEFAULT_VIDEOS_FILE_PATH = 'C:\\Users\\calix\\Desktop\\GT\\aits_temp\\aits_videos'
    VIDEO_FILE_PREFIX = 'picklist_'

    DEFAULT_HTK_OUTPUT_FILE_PATH = 'C:\\Users\\calix\\Desktop\\GT\\aits_temp\\htk_output'
    HTK_OUTPUT_FILE_PREFIX = 'results-'
    
    DEFAULT_SHOW_FRAMES = True

    DEFAULT_START_PICKLIST = 41
    DEFAULT_END_PICKLIST = 50
    # DEFAULT_END_PICKLIST = 90

    parser = argparse.ArgumentParser(
                    prog='Hand Item Script')
    
    parser.add_argument('--videopath', default = DEFAULT_VIDEOS_FILE_PATH) 
    parser.add_argument('--htkpath', default = DEFAULT_HTK_OUTPUT_FILE_PATH)
    parser.add_argument('--videoprefix', default = VIDEO_FILE_PREFIX)
    parser.add_argument('--htkprefix', default = HTK_OUTPUT_FILE_PREFIX)
    parser.add_argument('-s', '--start', default = DEFAULT_START_PICKLIST)
    parser.add_argument('-e', '--end', default = DEFAULT_END_PICKLIST)
    parser.add_argument('--show_frames', default = DEFAULT_SHOW_FRAMES)

    args = parser.parse_args()

    for i in range(args.start, args.end):
        print("Picklist " + str(i))
        video_full_path= os.path.join(args.videopath, args.videoprefix + str(i) + ".mp4")
        htk_output_full_path = os.path.join(args.htkpath, args.htkprefix + str(i))

        res = get_midpoint_carry_item_frames(video_full_path, htk_output_full_path, args.show_frames)
        
        
        